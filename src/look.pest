newline    = _{ "\n" }
whitespace = _{ " " | newline }
comment = _{ "//" ~ (!newline ~ any)* }

digit = { '0'..'9' }
bin_digit = { "0" | "1" }
hex_digit = { digit | 'A'..'F' }
alpha = { 'a'..'z' | 'A'..'Z' }
alphanum = { alpha | digit }
sid_char = { alphanum | "_" }

// Keywords
_use = { "use" }
_mod = { "mod" }
_self = { "self" }
_super = { "super" }
_dep = { "dep" }
_magic = { "magic" }
_goto = { "goto" }
_label = { "label" }
_break = { "break" }
_return = { "return" }
_loop = { "loop" }
_case = { "case" }
_if = { "if" }
_else = { "else" }
_while = { "while" }
_val = { "val" }
_as = { "as" }
_type_kw = { "type" }
_macro = { "macro" }
_mut = { "mut" }
_pub = { "pub" }
_ffi = { "ffi" }
keyword = { _use | _mod | _self | _super | _dep | _magic | _goto | _label | _break | _return | _loop | _case | _if | _else | _while | _val | _as | _type_kw | _macro | _mut | _pub | _ffi }

// Punctuation
scope = { "::" }

// Identifiers
maybe_attributed_sid = { ((attribute+ ~ "{" ~ sid ~ "}") | sid) }
sid = @{ !keyword ~ ((alpha ~ (sid_char{0, 126})) | ("_" ~ (sid_char{1, 126}))) ~ !sid_char }
id = { sid ~ (scope ~ sid)* }

// Literals
dec_int = @{ digit ~ (digit | "_")* }
bin_int = @{ "0b" ~ "_"* ~ bin_digit ~ (bin_digit | "_")* }
hex_int = @{ "0x" ~ "_"* ~ hex_digit ~ (hex_digit | "_")* }
float = @{ dec_int ~ "." ~ "_"* ~ dec_int ~ ("e" ~ ("+" | "-")? ~ "_"* ~ dec_int )? }
string = @{ "\"" ~ string_inner* ~ "\"" }
string_inner = @{ (!("\"" | "\\") ~ any) | escape }
escape = @{ "\\" ~ ("\\" | "\"" | "n" | "t" | "0" | ("u" ~ hex_digit{4})) }
literal = { bin_int | hex_int | float | dec_int | string }

// Attributes
meta_item_nullary =  { sid }
meta_item_pair = { sid ~ "=" ~ literal }
meta_item_lit_arg = { sid ~ "(" ~ literal ~ ")" }
meta_item_args = { sid ~ "(" ~ meta_item ~ ("," ~ meta_item)* ~ ")" }
meta_item = { meta_item_pair | meta_item_lit_arg | meta_item_args | meta_item_nullary }
attribute = { "#[" ~ meta_item ~ "]" }

// Macros
macro_invocation = ${ "$" ~ id ~ "(" ~ macro_args ~ ")" }
non_paren = @{ (!("(" | ")") ~ any) }
macro_args = @{ (non_paren | ("(" ~ macro_args ~ ")"))* }

repetition = { bin_int | hex_int | dec_int | macro_invocation }

// Types
fun_named_type = { product_named_type ~ "->" ~ _type }
fun_anon_type = { product_anon_type ~ "->" ~ _type }
named_type_annotated = { sid ~ ":" ~ _type }
maybe_attributed_named_type_annotated = { (attribute+ ~ "{" ~ named_type_annotated ~ "}") | named_type_annotated }
product_named_type = { "(" ~ maybe_attributed_named_type_annotated ~ ("," ~ maybe_attributed_named_type_annotated)* ~ ")" }
product_anon_type = { ("(" ~ maybe_attributed_type ~ ("," ~ maybe_attributed_type)* ~ ")") | ("(" ~ ")") }
product_repeated_type = { "(" ~ _type ~ ";" ~ repetition ~ ")" }
array_type = { "[" ~ _type ~ "]" }
ptr_mut_type = { "~" ~ _type }
ptr_type = { "@" ~ _type }
named_type_assign = { sid ~ "=" ~ _type }
maybe_attributed_named_type_assign = { (attribute+ ~ "{" ~ named_type_assign ~ "}") | named_type_assign }
type_application_named = { id ~ "<" ~ maybe_attributed_named_type_assign ~ ("," ~ maybe_attributed_named_type_assign)* ~ ">" }
type_application_anon = { id ~ "<" ~ maybe_attributed_type ~ ("," ~ maybe_attributed_type)* ~ ">" }
maybe_attributed_type = { ((attribute+ ~ "{" ~ _type ~ "}") | _type) }
_type = { type_application_named | type_application_anon | id | macro_invocation | ptr_type | ptr_mut_type | array_type | product_repeated_type | fun_named_type | fun_anon_type | product_named_type | product_anon_type }

// TypeDefs
type_level_fun = { "<" ~ maybe_attributed_sid ~ ("," ~ maybe_attributed_sid)* ~ ">" ~ "=>" ~ type_def }
summand = { "|" ~ sid ~ (product_named_type | product_anon_type | "") }
maybe_attributed_summand = { ((attribute+ ~ "{" ~ summand ~ "}") | summand ) }
sum = { _pub? ~ maybe_attributed_summand+ }
type_def = { sum | type_level_fun | _type }

// Patterns
summand_pattern = { "|" ~ sid ~ (product_named_pattern | product_anon_pattern | "") }
named_pattern_assign = { sid ~ "=" ~ pattern }
maybe_attributed_named_pattern_assign = { (attribute+ ~ "{" ~ named_pattern_assign ~ "}") | named_pattern_assign }
product_named_pattern = { "(" ~ maybe_attributed_named_pattern_assign ~ ("," ~ maybe_attributed_named_pattern_assign)* ~ ")" }
maybe_attributed_pattern = { (attribute+ ~ "{" ~ pattern ~ "}") | pattern }
product_anon_pattern = { ("(" ~ maybe_attributed_pattern ~ ("," ~ maybe_attributed_pattern)* ~ ")") | ("(" ~ ")") }
maybe_attributed_annotated_id_pattern = { (attribute+ ~ "{" ~ annotated_id_pattern ~ "}") | annotated_id_pattern }
annotated_id_pattern = { _mut? ~ named_type_annotated }
id_pattern = { _mut? ~ sid ~ (":" ~ _type)? }
ptr_pattern = { "@" ~ pattern }
blank_pattern = { "_" }
pattern = { id_pattern | blank_pattern | literal | ptr_pattern | product_named_pattern | product_anon_pattern | summand_pattern }

// Irrefutable patterns
named_pattern_irref_assign = { sid ~ "=" ~ pattern_irref }
maybe_attributed_named_pattern_irref_assign = { (attribute+ ~ "{" ~ named_pattern_irref_assign ~ "}") | named_pattern_irref_assign }
product_named_pattern_irref = { "(" ~ maybe_attributed_named_pattern_irref_assign ~ ("," ~ maybe_attributed_named_pattern_irref_assign)* ~ ")" }
maybe_attributed_pattern_irref = { (attribute+ ~ "{" ~ pattern_irref ~ "}") | pattern_irref }
product_anon_pattern_irref = { ("(" ~ maybe_attributed_pattern_irref ~ ("," ~ maybe_attributed_pattern_irref)* ~ ")") | ("(" ~ ")") }
ptr_pattern_irref = { "@" ~ pattern_irref }
pattern_irref = { id_pattern | blank_pattern | ptr_pattern_irref | product_named_pattern_irref | product_anon_pattern_irref }

// LValues (valid lhs of an assignment)
lvalue_ = { (deref_mut_ | array_index_ | product_access_anon_ | product_access_named_)* }
lvalue = { id ~ lvalue_ }

// Left recursive expressions
lor_ = { "||" ~ expression }
land_ = { "&&" ~ expression }
cast_ = { _as ~ _type }
product_access_anon_ = { "." ~ dec_int }
product_access_named_ = { "." ~ sid }
array_index_ = { "[" ~ expression ~ "]" }
deref_mut_ = { "~" }
deref_ = { "@" }
expression_ = { (deref_ | deref_mut_ | array_index_ | product_access_named_ | product_access_anon_ | cast_ | product_named_expression | product_anon_expression | land_ | lor_)* }

// Expressions
maybe_attributed_patterned_block = { ((attribute+ ~ "{" ~ patterned_block ~ "}") | patterned_block) }
patterned_block = { pattern ~ block }
block = { "{" ~ ((maybe_attributed_expression ~ (";" ~ maybe_attributed_expression)*) | "") ~ "}" }
break_expression = { _break ~ expression? }
return_expression = { _return ~ expression? }
while_expression = { _while ~ expression ~ block }
loop_expression = { _loop ~ expression ~ "{" ~ (maybe_attributed_patterned_block)* ~ "}" }
case_expression = { _case ~ expression ~ "{" ~ (maybe_attributed_patterned_block)* ~ "}" }
if_expression = { _if ~ expression ~ block ~ (_else ~ (if_expression | block))? }
val_expression = { _val ~ pattern_irref ~ ("=" ~ expression)? }
generic_args_def = { "<" ~ maybe_attributed_sid ~ ("," ~ maybe_attributed_sid)* ~ ">" }
generic_expression = { generic_args_def ~ "=>" ~ expression }
fun_args = { "(" ~ ((maybe_attributed_annotated_id_pattern ~ ("," ~ maybe_attributed_annotated_id_pattern)*) | "") ~ ")" }
fun_literal = { fun_args ~ "->" ~ _type ~ block }
named_expression_assign = { sid ~ "=" ~ expression }
maybe_attributed_named_expression_assign = { (attribute+ ~ "{" ~ named_expression_assign ~ "}") | named_expression_assign }
product_named_expression = { "(" ~ maybe_attributed_named_expression_assign ~ ("," ~ maybe_attributed_named_expression_assign)* ~ ")" }
product_anon_expression = { ("(" ~ maybe_attributed_expression ~ ("," ~ maybe_attributed_expression)* ~ ")") | ("(" ~ ")") }
product_repeated_expression = { "(" ~ expression ~ ";" ~ repetition ~ ")" }
array_expression = { "[" ~ expression ~ "]" }
ref_expression = { "@" ~ expression }
ref_mut_expression = { "~" ~ expression }
assignment_expression = { lvalue ~ "=" ~ expression }
lexpression = { assignment_expression | literal | type_application_named | type_application_anon | id | macro_invocation | ref_expression | ref_mut_expression | array_expression | product_repeated_expression | fun_literal | product_named_expression | product_anon_expression | generic_expression | val_expression | case_expression | loop_expression | while_expression | return_expression | break_expression | if_expression | block }
maybe_attributed_expression = { ((attribute+ ~ "{" ~ expression ~ "}") | expression) }
expression = { lexpression ~ expression_ }

// Uses
use_prefix = { (_mod ~ scope) | (_dep ~ scope) | (_magic ~ scope) | "" }
attributed_use_tree = { attribute+ ~ "{" ~ use_tree ~ "}" }
use_branch = { use_tree | ("{" ~ (use_tree | attributed_use_tree) ~ ("," ~ (use_tree | attributed_use_tree))* ~ "}") }
use_tree = {(_self ~ (_as ~ sid)?) | (sid ~ scope ~ use_branch) | (sid ~ (_as ~ sid)?) | (_super ~ scope ~ use_branch) }

// Items
ffi_type = { _pub? ~ _type_kw ~ sid }
ffi_val = { _pub? ~ _val ~ sid ~ ":" ~ _type }
ffi_item = { ffi_type | ffi_val }
ffi_language = { "C" }
ffi_block = { _ffi ~ ffi_language ~ "{" ~ (ffi_item | (attribute+ ~ "{" ~ ffi_item ~ "}"))* ~ "}" }
val_fun_item = { _pub? ~ _val ~ sid ~ "=" ~ fun_literal }
val_item = { _pub? ~ _val ~ _mut? ~ named_type_annotated ~ "=" ~ expression }
type_item = { _pub? ~ _type_kw ~ sid ~ "=" ~ type_def }
use_item = { _pub? ~ _use ~ use_prefix ~ use_tree  }
item = { use_item | type_item | val_fun_item | val_item | ffi_block }

// A file of look code
file_item = { item | (attribute+ ~ "{" ~ item ~ "}") }
file = { file_item* }
